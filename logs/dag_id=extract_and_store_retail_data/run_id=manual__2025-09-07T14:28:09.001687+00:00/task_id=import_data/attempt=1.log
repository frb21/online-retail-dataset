{"timestamp":"2025-09-07T14:28:10.697744","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-07T14:28:10.698369","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/pipeline.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-07T14:28:10.743398Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:10.743663Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:10.743943Z","level":"info","event":"Current task name:import_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:10.744173Z","level":"info","event":"Dag name:extract_and_store_retail_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:11.810750","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"ValueError","exc_value":"time data \"12/1/10 8:26\" doesn't match format \"%m/%d/%Y %H:%M\", at position 0. You might want to try:\n    - passing `format` if your strings have a consistent format;\n    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;\n    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":920,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1215,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":216,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":239,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/pipeline.py","lineno":38,"name":"import_data_and_transform"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py","lineno":1108,"name":"to_datetime"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py","lineno":254,"name":"_maybe_cache"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py","lineno":488,"name":"_convert_listlike_datetimes"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py","lineno":519,"name":"_array_strptime_with_fallback"},{"filename":"/opt/airflow/strptime.pyx","lineno":534,"name":"pandas._libs.tslibs.strptime.array_strptime"},{"filename":"/opt/airflow/strptime.pyx","lineno":355,"name":"pandas._libs.tslibs.strptime.array_strptime"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-09-07T14:28:11.829288Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:11.829645Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:11.829926Z","level":"info","event":"Task:<Task(PythonOperator): import_data>","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:11.830171Z","level":"info","event":"Failure caused by time data \"12/1/10 8:26\" doesn't match format \"%m/%d/%Y %H:%M\", at position 0. You might want to try:","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:11.830464Z","level":"info","event":"    - passing `format` if your strings have a consistent format;","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:11.830698Z","level":"info","event":"    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-07T14:28:11.831132Z","level":"info","event":"    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.","chan":"stdout","logger":"task"}
